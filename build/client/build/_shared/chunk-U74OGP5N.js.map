{
  "version": 3,
  "sources": ["../../../node_modules/refractor/lang/http.js"],
  "sourcesContent": ["'use strict';\n\nmodule.exports = http;\nhttp.displayName = 'http';\nhttp.aliases = [];\nfunction http(Prism) {\n  ;(function (Prism) {\n    Prism.languages.http = {\n      'request-line': {\n        pattern:\n        /^(?:GET|HEAD|POST|PUT|DELETE|CONNECT|OPTIONS|TRACE|PATCH|PRI|SEARCH)\\s(?:https?:\\/\\/|\\/)\\S*\\sHTTP\\/[0-9.]+/m,\n        inside: {\n          // HTTP Method\n          method: {\n            pattern: /^[A-Z]+\\b/,\n            alias: 'property'\n          },\n          // Request Target e.g. http://example.com, /path/to/file\n          'request-target': {\n            pattern: /^(\\s)(?:https?:\\/\\/|\\/)\\S*(?=\\s)/,\n            lookbehind: true,\n            alias: 'url',\n            inside: Prism.languages.uri\n          },\n          // HTTP Version\n          'http-version': {\n            pattern: /^(\\s)HTTP\\/[0-9.]+/,\n            lookbehind: true,\n            alias: 'property'\n          }\n        }\n      },\n      'response-status': {\n        pattern: /^HTTP\\/[0-9.]+ \\d+ .+/m,\n        inside: {\n          // HTTP Version\n          'http-version': {\n            pattern: /^HTTP\\/[0-9.]+/,\n            alias: 'property'\n          },\n          // Status Code\n          'status-code': {\n            pattern: /^(\\s)\\d+(?=\\s)/,\n            lookbehind: true,\n            alias: 'number'\n          },\n          // Reason Phrase\n          'reason-phrase': {\n            pattern: /^(\\s).+/,\n            lookbehind: true,\n            alias: 'string'\n          }\n        }\n      },\n      // HTTP header name\n      'header-name': {\n        pattern: /^[\\w-]+:(?=.)/m,\n        alias: 'keyword'\n      }\n    }; // Create a mapping of Content-Type headers to language definitions\n    var langs = Prism.languages;\n    var httpLanguages = {\n      'application/javascript': langs.javascript,\n      'application/json': langs.json || langs.javascript,\n      'application/xml': langs.xml,\n      'text/xml': langs.xml,\n      'text/html': langs.html,\n      'text/css': langs.css\n    }; // Declare which types can also be suffixes\n    var suffixTypes = {\n      'application/json': true,\n      'application/xml': true\n    };\n    /**\n     * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n     *\n     * @param {string} contentType\n     * @returns {string}\n     */\n    function getSuffixPattern(contentType) {\n      var suffix = contentType.replace(/^[a-z]+\\//, '');\n      var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])';\n      return '(?:' + contentType + '|' + suffixPattern + ')';\n    } // Insert each content type parser that has its associated language\n    // currently loaded.\n    var options;\n    for (var contentType in httpLanguages) {\n      if (httpLanguages[contentType]) {\n        options = options || {};\n        var pattern = suffixTypes[contentType] ?\n        getSuffixPattern(contentType) :\n        contentType;\n        options[contentType.replace(/\\//g, '-')] = {\n          pattern: RegExp(\n            '(content-type:\\\\s*' +\n            pattern +\n            '(?:(?:\\\\r\\\\n?|\\\\n).+)*)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*',\n            'i'\n          ),\n          lookbehind: true,\n          inside: httpLanguages[contentType]\n        };\n      }\n    }\n    if (options) {\n      Prism.languages.insertBefore('http', 'header-name', options);\n    }\n  })(Prism);\n}"],
  "mappings": ";;;;;AAAA;AAAA;AAEA,WAAO,UAAU;AACjB,SAAK,cAAc;AACnB,SAAK,UAAU,CAAC;AAChB,aAAS,KAAK,OAAO;AACnB;AAAC,OAAC,SAAUA,QAAO;AACjB,QAAAA,OAAM,UAAU,OAAO;AAAA,UACrB,gBAAgB;AAAA,YACd,SACA;AAAA,YACA,QAAQ;AAAA;AAAA,cAEN,QAAQ;AAAA,gBACN,SAAS;AAAA,gBACT,OAAO;AAAA,cACT;AAAA;AAAA,cAEA,kBAAkB;AAAA,gBAChB,SAAS;AAAA,gBACT,YAAY;AAAA,gBACZ,OAAO;AAAA,gBACP,QAAQA,OAAM,UAAU;AAAA,cAC1B;AAAA;AAAA,cAEA,gBAAgB;AAAA,gBACd,SAAS;AAAA,gBACT,YAAY;AAAA,gBACZ,OAAO;AAAA,cACT;AAAA,YACF;AAAA,UACF;AAAA,UACA,mBAAmB;AAAA,YACjB,SAAS;AAAA,YACT,QAAQ;AAAA;AAAA,cAEN,gBAAgB;AAAA,gBACd,SAAS;AAAA,gBACT,OAAO;AAAA,cACT;AAAA;AAAA,cAEA,eAAe;AAAA,gBACb,SAAS;AAAA,gBACT,YAAY;AAAA,gBACZ,OAAO;AAAA,cACT;AAAA;AAAA,cAEA,iBAAiB;AAAA,gBACf,SAAS;AAAA,gBACT,YAAY;AAAA,gBACZ,OAAO;AAAA,cACT;AAAA,YACF;AAAA,UACF;AAAA;AAAA,UAEA,eAAe;AAAA,YACb,SAAS;AAAA,YACT,OAAO;AAAA,UACT;AAAA,QACF;AACA,YAAI,QAAQA,OAAM;AAClB,YAAI,gBAAgB;AAAA,UAClB,0BAA0B,MAAM;AAAA,UAChC,oBAAoB,MAAM,QAAQ,MAAM;AAAA,UACxC,mBAAmB,MAAM;AAAA,UACzB,YAAY,MAAM;AAAA,UAClB,aAAa,MAAM;AAAA,UACnB,YAAY,MAAM;AAAA,QACpB;AACA,YAAI,cAAc;AAAA,UAChB,oBAAoB;AAAA,UACpB,mBAAmB;AAAA,QACrB;AAOA,iBAAS,iBAAiBC,cAAa;AACrC,cAAI,SAASA,aAAY,QAAQ,aAAa,EAAE;AAChD,cAAI,gBAAgB,0BAA0B,SAAS;AACvD,iBAAO,QAAQA,eAAc,MAAM,gBAAgB;AAAA,QACrD;AAEA,YAAI;AACJ,iBAAS,eAAe,eAAe;AACrC,cAAI,cAAc,WAAW,GAAG;AAC9B,sBAAU,WAAW,CAAC;AACtB,gBAAI,UAAU,YAAY,WAAW,IACrC,iBAAiB,WAAW,IAC5B;AACA,oBAAQ,YAAY,QAAQ,OAAO,GAAG,CAAC,IAAI;AAAA,cACzC,SAAS;AAAA,gBACP,uBACA,UACA;AAAA,gBACA;AAAA,cACF;AAAA,cACA,YAAY;AAAA,cACZ,QAAQ,cAAc,WAAW;AAAA,YACnC;AAAA,UACF;AAAA,QACF;AACA,YAAI,SAAS;AACX,UAAAD,OAAM,UAAU,aAAa,QAAQ,eAAe,OAAO;AAAA,QAC7D;AAAA,MACF,GAAG,KAAK;AAAA,IACV;AAAA;AAAA;",
  "names": ["Prism", "contentType"]
}
